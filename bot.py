import os
import logging
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp
import json
from dexscreener import DexScreenerAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHECK_INTERVAL = int(os.getenv('CHECK_INTERVAL', '60'))
MIN_TRANSACTION_AMOUNT = float(os.getenv('MIN_TRANSACTION_AMOUNT', '1000'))

class DexScreenerBot:
    def __init__(self):
        self.watched_tokens = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        self.user_settings = {}   # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.last_check = {}      # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ DexScreener.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/watch <–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞> - –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞\n"
            "/unwatch <–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞> - –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n"
            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "/last_tx <–∞–¥—Ä–µ—Å_—Ç–æ–∫–µ–Ω–∞> - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

    async def watch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /watch"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            return

        token_address = context.args[0]
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        async with DexScreenerAPI() as api:
            token_info = await api.get_token_info(token_address)
            if not token_info:
                await update.message.reply_text("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

        if user_id not in self.watched_tokens:
            self.watched_tokens[user_id] = set()
            self.user_settings[user_id] = {
                'min_amount': MIN_TRANSACTION_AMOUNT,
                'transaction_type': None
            }
        
        self.watched_tokens[user_id].add(token_address)
        self.last_check[token_address] = datetime.now()
        
        await update.message.reply_text(
            f"–¢–æ–∫–µ–Ω {token_address} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${self.user_settings[user_id]['min_amount']}\n"
            f"–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {'–í—Å–µ' if not self.user_settings[user_id]['transaction_type'] else self.user_settings[user_id]['transaction_type']}"
        )

    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        user_id = update.effective_user.id
        if user_id not in self.user_settings:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /watch")
            return

        if not context.args:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.user_settings[user_id]
            await update.message.reply_text(
                "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${settings['min_amount']}\n"
                f"–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {'–í—Å–µ' if not settings['transaction_type'] else settings['transaction_type']}\n\n"
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/settings min <—Å—É–º–º–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É\n"
                "/settings type <buy/sell> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
            )
            return

        if len(context.args) < 2:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return

        setting_type = context.args[0].lower()
        value = context.args[1].lower()

        if setting_type == 'min':
            try:
                amount = float(value)
                self.user_settings[user_id]['min_amount'] = amount
                await update.message.reply_text(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${amount}")
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã")
        elif setting_type == 'type':
            if value in ['buy', 'sell']:
                self.user_settings[user_id]['transaction_type'] = value
                await update.message.reply_text(f"–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}")
            else:
                await update.message.reply_text("–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    async def check_transactions(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        async with DexScreenerAPI() as api:
            for user_id, tokens in self.watched_tokens.items():
                settings = self.user_settings[user_id]
                for token_address in tokens:
                    transactions = await api.get_recent_transactions(
                        token_address,
                        min_amount=settings['min_amount'],
                        transaction_type=settings['transaction_type'],
                        time_window=CHECK_INTERVAL
                    )

                    for tx in transactions:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        message = (
                            f"üîî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n"
                            f"–¢–æ–∫–µ–Ω: {token_address}\n"
                            f"–¢–∏–ø: {tx['type']}\n"
                            f"–°—É–º–º–∞: ${float(tx['amountUsd']):.2f}\n"
                            f"–í—Ä–µ–º—è: {datetime.fromtimestamp(tx['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}"
                        )
                        
                        try:
                            await context.bot.send_message(chat_id=user_id, text=message)
                        except Exception as e:
                            logger.error(f"Error sending message to user {user_id}: {e}")

    async def unwatch(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unwatch"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
            return

        token_address = context.args[0]
        user_id = update.effective_user.id

        if user_id in self.watched_tokens and token_address in self.watched_tokens[user_id]:
            self.watched_tokens[user_id].remove(token_address)
            if token_address in self.last_check:
                del self.last_check[token_address]
            await update.message.reply_text(f"–¢–æ–∫–µ–Ω {token_address} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

    async def list_watched(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
        user_id = update.effective_user.id
        if user_id not in self.watched_tokens or not self.watched_tokens[user_id]:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
            return

        settings = self.user_settings[user_id]
        tokens_list = "\n".join(self.watched_tokens[user_id])
        await update.message.reply_text(
            f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã:\n{tokens_list}\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${settings['min_amount']}\n"
            f"–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {'–í—Å–µ' if not settings['transaction_type'] else settings['transaction_type']}"
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.start(update, context)

    async def last_tx(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /last_tx"""
        if not context.args:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return

        token_address = context.args[0]
        async with DexScreenerAPI() as api:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –∏ –µ–≥–æ –ø–∞—Ä–∞—Ö
                async with api.session.get(f"{api.base_url}/dex/tokens/{token_address}") as response:
                    if response.status != 200:
                        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ.")
                        return
                    
                    data = await response.json()
                    pairs = data.get('pairs', [])
                    
                    if not pairs:
                        await update.message.reply_text("–ü–∞—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        return

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    pairs = sorted(pairs, key=lambda x: float(x.get('liquidity', {}).get('usd', 0)), reverse=True)
                    
                    # –ë–µ—Ä–µ–º —Å–∞–º—É—é –ª–∏–∫–≤–∏–¥–Ω—É—é –ø–∞—Ä—É
                    pair = pairs[0]
                    chain_id = pair['chainId']
                    pair_address = pair['pairAddress']
                    pair_url = pair.get('url', '')
                    base_token = pair.get('baseToken', {})
                    quote_token = pair.get('quoteToken', {})

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ
                    async with api.session.get(f"{api.base_url}/dex/pairs/{chain_id}/{pair_address}") as response:
                        if response.status != 200:
                            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–µ.")
                            return

                        pair_data = await response.json()
                        if not pair_data.get('pairs'):
                            await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                            return

                        pair_info = pair_data['pairs'][0]
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞—Ä–µ
                        message = (
                            f"üí± –ü–∞—Ä–∞: {base_token.get('symbol', '')}/{quote_token.get('symbol', '')}\n"
                            f"üîó –°—Å—ã–ª–∫–∞: {pair_url}\n"
                            f"üí∞ –¶–µ–Ω–∞: ${float(pair_info.get('priceUsd', 0)):.6f}\n"
                            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${float(pair_info.get('liquidity', {}).get('usd', 0)):,.2f}\n\n"
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
                        txns = pair_info.get('txns', {})
                        for time_frame, txn_data in txns.items():
                            buys = txn_data.get('buys', 0)
                            sells = txn_data.get('sells', 0)
                            message += f"{time_frame}: üü¢ {buys} –ø–æ–∫—É–ø–æ–∫, üî¥ {sells} –ø—Ä–æ–¥–∞–∂\n"

                        await update.message.reply_text(message)

            except Exception as e:
                logger.error(f"Error in last_tx: {e}")
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = DexScreenerBot()
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("watch", bot.watch))
    application.add_handler(CommandHandler("unwatch", bot.unwatch))
    application.add_handler(CommandHandler("list", bot.list_watched))
    application.add_handler(CommandHandler("settings", bot.settings))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("last_tx", bot.last_tx))

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    application.job_queue.run_repeating(bot.check_transactions, interval=CHECK_INTERVAL)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 